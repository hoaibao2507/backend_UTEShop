import { Body, Controller, Get, Post, Put, UseGuards, Param, ParseIntPipe, Request, UseInterceptors, UploadedFile, BadRequestException } from '@nestjs/common';
import { UsersService } from './users.service';
import { User } from './users.entity';
import { AuthGuard } from '@nestjs/passport';
import { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse, ApiConsumes, ApiProperty } from '@nestjs/swagger';
import { CreateUserDto, UpdateUserDto } from './dto/users.dto';
import { FileInterceptor } from '@nestjs/platform-express';
import { memoryStorage } from 'multer';
import { CloudinaryService } from '../cloudinary/cloudinary.service';

@ApiTags('users')
@Controller('users')
export class UsersController {
    constructor(
        private usersService: UsersService,
        private cloudinaryService: CloudinaryService
    ) {}

    @Get('getAll')
    @ApiOperation({ 
        summary: 'L·∫•y danh s√°ch kh√°ch h√†ng', 
        description: 'L·∫•y danh s√°ch t·∫•t c·∫£ kh√°ch h√†ng (customer) trong h·ªá th·ªëng (ch·ªâ d√†nh cho admin)' 
    })
    @ApiResponse({ 
        status: 200, 
        description: 'Danh s√°ch kh√°ch h√†ng ƒë∆∞·ª£c tr·∫£ v·ªÅ th√†nh c√¥ng',
        schema: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: { type: 'number', example: 1 },
                    firstName: { type: 'string', example: 'Nguy·ªÖn' },
                    lastName: { type: 'string', example: 'VƒÉn A' },
                    email: { type: 'string', example: 'nguyenvana@gmail.com' },
                    phone: { type: 'string', example: '0123456789' },
                    address: { type: 'string', example: '123 ƒê∆∞·ªùng ABC' },
                    city: { type: 'string', example: 'TP.HCM' },
                    gender: { type: 'string', example: 'male' },
                    dateOfBirth: { type: 'string', example: '1990-01-01' },
                    isVerified: { type: 'boolean', example: true },
                    createdAt: { type: 'string', example: '2025-08-30T10:00:00Z' },
                    updatedAt: { type: 'string', example: '2025-08-30T10:00:00Z' }
                }
            }
        }
    })
    async getAll(): Promise<User[]> {
        return this.usersService.findAll();
    }

    @UseGuards(AuthGuard('jwt'))
    @Get('profile')
    @ApiBearerAuth()
    @ApiOperation({ 
        summary: 'L·∫•y th√¥ng tin profile c·ªßa user ƒëang ƒëƒÉng nh·∫≠p',
        description: 'API n√†y y√™u c·∫ßu JWT token h·ª£p l·ªá. Token ph·∫£i ƒë∆∞·ª£c g·ª≠i trong header Authorization: Bearer <token>'
    })
    @ApiResponse({ 
        status: 200, 
        description: 'Th√¥ng tin profile user',
        schema: {
            type: 'object',
            example: {
                id: 1,
                firstName: "Nguy·ªÖn",
                lastName: "VƒÉn A",
                email: "nguyenvana@gmail.com",
                phone: "0123456789",
                address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1",
                city: "TP.HCM",
                gender: "male",
                dateOfBirth: "1990-01-01",
                isVerified: true,
                avatar: "/uploads/avatar_abc123.jpg",
                createdAt: "2025-08-30T10:00:00.000Z",
                updatedAt: "2025-08-30T10:00:00.000Z"
            },
            properties: {
                id: { type: 'number', example: 1, description: 'ID c·ªßa user' },
                firstName: { type: 'string', example: 'Nguy·ªÖn', description: 'T√™n' },
                lastName: { type: 'string', example: 'VƒÉn A', description: 'H·ªç' },
                email: { type: 'string', example: 'nguyenvana@gmail.com', description: 'Email' },
                phone: { type: 'string', example: '0123456789', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                address: { type: 'string', example: '123 ƒê∆∞·ªùng ABC', description: 'ƒê·ªãa ch·ªâ' },
                city: { type: 'string', example: 'TP.HCM', description: 'Th√†nh ph·ªë' },
                gender: { type: 'string', example: 'male', description: 'Gi·ªõi t√≠nh' },
                dateOfBirth: { type: 'string', example: '1990-01-01', description: 'Ng√†y sinh' },
                isVerified: { type: 'boolean', example: true, description: 'Tr·∫°ng th√°i x√°c th·ª±c' },
                avatar: { type: 'string', example: '/uploads/avatar_abc123.jpg', description: 'ƒê∆∞·ªùng d·∫´n ·∫£nh avatar' },
                createdAt: { type: 'string', example: '2025-08-30T10:00:00Z', description: 'Ng√†y t·∫°o' },
                updatedAt: { type: 'string', example: '2025-08-30T10:00:00Z', description: 'Ng√†y c·∫≠p nh·∫≠t' }
            }
        }
    })
    @ApiResponse({ 
        status: 401, 
        description: 'Unauthorized - Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n',
        schema: {
            type: 'object',
            example: {
                statusCode: 401,
                message: "Unauthorized"
            }
        }
    })
    @ApiResponse({ 
        status: 500, 
        description: 'Internal Server Error - L·ªói server',
        schema: {
            type: 'object',
            example: {
                statusCode: 500,
                message: "L·ªói l·∫•y profile: Kh√¥ng th·ªÉ l·∫•y User ID t·ª´ token"
            }
        }
    })
    async getProfile(@Request() req): Promise<User> {
        try {
            console.log('üîç Request user object:', req.user); // Debug log
            console.log('üîç Request headers:', req.headers); // Debug log
            
            const userId = req.user.id; // L·∫•y ID t·ª´ JWT token
            console.log('üîç User ID from token:', userId); // Debug log
            
            if (!userId) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y User ID t·ª´ token');
            }
            
            const user = await this.usersService.findById(userId);
            console.log('‚úÖ User found:', user); // Debug log
            
            return user;
        } catch (error) {
            console.error('‚ùå Profile error:', error);
            throw new Error(`L·ªói l·∫•y profile: ${error.message}`);
        }
    }

    @UseGuards(AuthGuard('jwt'))
    @Post('create')
    @ApiBearerAuth()
    @ApiOperation({ 
        summary: 'T·∫°o ng∆∞·ªùi d√πng m·ªõi', 
        description: 'T·∫°o m·ªôt ng∆∞·ªùi d√πng m·ªõi trong h·ªá th·ªëng (ch·ªâ d√†nh cho admin) (y√™u c·∫ßu x√°c th·ª±c)' 
    })
    @ApiResponse({ status: 201, description: 'Ng∆∞·ªùi d√πng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng' })
    @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
    @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá' })
    async create(@Body() user: CreateUserDto): Promise<User> {
        return this.usersService.create(user);
    }


    @UseGuards(AuthGuard('jwt'))
    @Put('update-profile')
    @ApiBearerAuth()
    @ApiConsumes('multipart/form-data')
    @ApiOperation({ 
        summary: 'C·∫≠p nh·∫≠t profile user (th√¥ng tin + avatar)', 
        description: 'C·∫≠p nh·∫≠t th√¥ng tin v√† avatar c·ªßa user ƒëang ƒëƒÉng nh·∫≠p trong m·ªôt request duy nh·∫•t' 
    })
    @ApiProperty({
        name: 'firstName',
        description: 'T√™n c·ªßa ng∆∞·ªùi d√πng',
        required: false,
        type: 'string',
        example: 'Nguy·ªÖn'
    })
    @ApiProperty({
        name: 'lastName',
        description: 'H·ªç c·ªßa ng∆∞·ªùi d√πng',
        required: false,
        type: 'string',
        example: 'VƒÉn A'
    })
    @ApiProperty({
        name: 'email',
        description: 'Email c·ªßa ng∆∞·ªùi d√πng',
        required: false,
        type: 'string',
        example: 'user@example.com'
    })
    @ApiProperty({
        name: 'phone',
        description: 'S·ªë ƒëi·ªán tho·∫°i',
        required: false,
        type: 'string',
        example: '0123456789'
    })
    @ApiProperty({
        name: 'address',
        description: 'ƒê·ªãa ch·ªâ chi ti·∫øt',
        required: false,
        type: 'string',
        example: '123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1'
    })
    @ApiProperty({
        name: 'city',
        description: 'Th√†nh ph·ªë',
        required: false,
        type: 'string',
        example: 'TP. H·ªì Ch√≠ Minh'
    })
    @ApiProperty({
        name: 'ward',
        description: 'Ph∆∞·ªùng/X√£',
        required: false,
        type: 'string',
        example: 'Ph∆∞·ªùng B·∫øn Ngh√©'
    })
    @ApiProperty({
        name: 'dateOfBirth',
        description: 'Ng√†y sinh (YYYY-MM-DD)',
        required: false,
        type: 'string',
        example: '1990-01-01'
    })
    @ApiProperty({
        name: 'gender',
        description: 'Gi·ªõi t√≠nh (male, female, other)',
        required: false,
        type: 'string',
        enum: ['male', 'female', 'other'],
        example: 'male'
    })
    @ApiProperty({
        name: 'avatar',
        description: 'File ·∫£nh avatar',
        required: false,
        type: 'string',
        format: 'binary'
    })
    @ApiResponse({ 
        status: 200, 
        description: 'Profile ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng',
        schema: {
            type: 'object',
            example: {
                message: 'Profile updated successfully',
                user: {
                    id: 1,
                    firstName: 'Nguy·ªÖn',
                    lastName: 'VƒÉn A',
                    email: 'nguyenvana@gmail.com',
                    phone: '0123456789',
                    address: '123 ƒê∆∞·ªùng ABC',
                    city: 'TP.HCM',
                    gender: 'male',
                    dateOfBirth: '1990-01-01',
                    avatar: '/uploads/avatar_1234567890.jpg'
                }
            }
        }
    })
    @ApiResponse({ status: 401, description: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p' })
    @ApiResponse({ status: 400, description: 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá' })
    @UseInterceptors(FileInterceptor('avatar', {
        storage: memoryStorage(), // L∆∞u trong memory thay v√¨ disk
        fileFilter: (req, file, cb) => {
            if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/)) {
                return cb(new BadRequestException('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (jpg, jpeg, png, gif)'), false);
            }
            cb(null, true);
        },
        limits: {
            fileSize: 5 * 1024 * 1024, // 5MB
        }
    }))
    async updateProfile(
        @Request() req, 
        @Body() updateUserDto: UpdateUserDto,
        @UploadedFile() avatar?: Express.Multer.File
    ) {
        try {
            const userId = req.user.id;

            // Upload avatar to Cloudinary if provided
            if (avatar) {
                const avatarUrl = await this.cloudinaryService.uploadImageFromBuffer(avatar.buffer, 'avatars');
                updateUserDto.avatar = avatarUrl;
            }

            const updatedUser = await this.usersService.updateProfile(userId, updateUserDto);
            
            return {
                message: 'Profile updated successfully',
                user: updatedUser
            };
        } catch (error) {
            throw new BadRequestException(`L·ªói c·∫≠p nh·∫≠t profile: ${error.message}`);
        }
    }

}
