import { Body, Controller, Get, Post, UseGuards, Param, ParseIntPipe, Request } from '@nestjs/common';
import { UsersService } from './users.service';
import { User } from './users.entity';
import { AuthGuard } from '@nestjs/passport';
import { ApiTags, ApiBearerAuth, ApiOperation, ApiResponse } from '@nestjs/swagger';
import { CreateUserDto, UpdateUserDto } from 'src/dto/users.dto';

@ApiTags('users')
@Controller('users')
export class UsersController {
    constructor(private usersService: UsersService) {}

    @Get('getAll')
    @ApiOperation({ summary: 'L·∫•y danh s√°ch t·∫•t c·∫£ users (Admin only)' })
    @ApiResponse({ 
        status: 200, 
        description: 'Danh s√°ch t·∫•t c·∫£ users',
        schema: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    id: { type: 'number', example: 1 },
                    firstName: { type: 'string', example: 'Nguy·ªÖn' },
                    lastName: { type: 'string', example: 'VƒÉn A' },
                    email: { type: 'string', example: 'nguyenvana@gmail.com' },
                    phone: { type: 'string', example: '0123456789' },
                    address: { type: 'string', example: '123 ƒê∆∞·ªùng ABC' },
                    city: { type: 'string', example: 'TP.HCM' },
                    gender: { type: 'string', example: 'male' },
                    dateOfBirth: { type: 'string', example: '1990-01-01' },
                    isVerified: { type: 'boolean', example: true },
                    createdAt: { type: 'string', example: '2025-08-30T10:00:00Z' },
                    updatedAt: { type: 'string', example: '2025-08-30T10:00:00Z' }
                }
            }
        }
    })
    async getAll(): Promise<User[]> {
        return this.usersService.findAll();
    }

    @UseGuards(AuthGuard('jwt'))
    @Get('profile')
    @ApiBearerAuth()
    @ApiOperation({ 
        summary: 'L·∫•y th√¥ng tin profile c·ªßa user ƒëang ƒëƒÉng nh·∫≠p',
        description: 'API n√†y y√™u c·∫ßu JWT token h·ª£p l·ªá. Token ph·∫£i ƒë∆∞·ª£c g·ª≠i trong header Authorization: Bearer <token>'
    })
    @ApiResponse({ 
        status: 200, 
        description: 'Th√¥ng tin profile user',
        schema: {
            type: 'object',
            example: {
                id: 1,
                firstName: "Nguy·ªÖn",
                lastName: "VƒÉn A",
                email: "nguyenvana@gmail.com",
                phone: "0123456789",
                address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1",
                city: "TP.HCM",
                gender: "male",
                dateOfBirth: "1990-01-01",
                isVerified: true,
                createdAt: "2025-08-30T10:00:00.000Z",
                updatedAt: "2025-08-30T10:00:00.000Z"
            },
            properties: {
                id: { type: 'number', example: 1, description: 'ID c·ªßa user' },
                firstName: { type: 'string', example: 'Nguy·ªÖn', description: 'T√™n' },
                lastName: { type: 'string', example: 'VƒÉn A', description: 'H·ªç' },
                email: { type: 'string', example: 'nguyenvana@gmail.com', description: 'Email' },
                phone: { type: 'string', example: '0123456789', description: 'S·ªë ƒëi·ªán tho·∫°i' },
                address: { type: 'string', example: '123 ƒê∆∞·ªùng ABC', description: 'ƒê·ªãa ch·ªâ' },
                city: { type: 'string', example: 'TP.HCM', description: 'Th√†nh ph·ªë' },
                gender: { type: 'string', example: 'male', description: 'Gi·ªõi t√≠nh' },
                dateOfBirth: { type: 'string', example: '1990-01-01', description: 'Ng√†y sinh' },
                isVerified: { type: 'boolean', example: true, description: 'Tr·∫°ng th√°i x√°c th·ª±c' },
                createdAt: { type: 'string', example: '2025-08-30T10:00:00Z', description: 'Ng√†y t·∫°o' },
                updatedAt: { type: 'string', example: '2025-08-30T10:00:00Z', description: 'Ng√†y c·∫≠p nh·∫≠t' }
            }
        }
    })
    @ApiResponse({ 
        status: 401, 
        description: 'Unauthorized - Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n',
        schema: {
            type: 'object',
            example: {
                statusCode: 401,
                message: "Unauthorized"
            }
        }
    })
    @ApiResponse({ 
        status: 500, 
        description: 'Internal Server Error - L·ªói server',
        schema: {
            type: 'object',
            example: {
                statusCode: 500,
                message: "L·ªói l·∫•y profile: Kh√¥ng th·ªÉ l·∫•y User ID t·ª´ token"
            }
        }
    })
    async getProfile(@Request() req): Promise<User> {
        try {
            console.log('üîç Request user object:', req.user); // Debug log
            console.log('üîç Request headers:', req.headers); // Debug log
            
            const userId = req.user.id; // L·∫•y ID t·ª´ JWT token
            console.log('üîç User ID from token:', userId); // Debug log
            
            if (!userId) {
                throw new Error('Kh√¥ng th·ªÉ l·∫•y User ID t·ª´ token');
            }
            
            const user = await this.usersService.findById(userId);
            console.log('‚úÖ User found:', user); // Debug log
            
            return user;
        } catch (error) {
            console.error('‚ùå Profile error:', error);
            throw new Error(`L·ªói l·∫•y profile: ${error.message}`);
        }
    }

    @UseGuards(AuthGuard('jwt'))
    @Post('create')
    @ApiBearerAuth()
    @ApiOperation({ summary: 'T·∫°o user m·ªõi (Admin only)' })
    async create(@Body() user: CreateUserDto): Promise<User> {
        return this.usersService.create(user);
    }

    @UseGuards(AuthGuard('jwt'))
    @Post('update/:id')
    @ApiBearerAuth()
    @ApiOperation({ summary: 'C·∫≠p nh·∫≠t th√¥ng tin user' })
    async update(@Param('id', ParseIntPipe) id: number, @Body() user: UpdateUserDto): Promise<User> {
        return this.usersService.update(id, user);
    }
}
